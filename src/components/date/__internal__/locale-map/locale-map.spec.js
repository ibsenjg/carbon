import { localeMap } from "./locale-map";

const euLocales = ["en-GB", "en-ZA", "fr-FR", "es", "fr-CA", "de"];
const naLocales = ["en-US", "en-CA"];

const euFormats = [
  "dMyyyy",
  "d.M.yyyy",
  "d,M,yyyy",
  "d-M-yyyy",
  "d/M/yyyy",
  "ddMyyyy",
  "dd.M.yyyy",
  "dd,M,yyyy",
  "dd-M-yyyy",
  "dd/M/yyyy",
  "dMMyyyy",
  "d.MM.yyyy",
  "d,MM,yyyy",
  "d-MM-yyyy",
  "d/MM/yyyy",
  "ddMMyyyy",
  "dd.MM.yyyy",
  "dd,MM,yyyy",
  "dd-MM-yyyy",
  "dd/MM/yyyy",
  "dMyy",
  "d.M.yy",
  "d,M,yy",
  "d-M-yy",
  "d/M/yy",
  "ddMyy",
  "dd.M.yy",
  "dd,M,yy",
  "dd-M-yy",
  "dd/M/yy",
  "dMMyy",
  "d.MM.yy",
  "d,MM,yy",
  "d-MM-yy",
  "d/MM/yy",
  "ddMMyy",
  "dd.MM.yy",
  "dd,MM,yy",
  "dd-MM-yy",
  "dd/MM/yy",
  "d",
  "d.",
  "d,",
  "d-",
  "d/",
  "dM",
  "d.M.",
  "d,M,",
  "d-M-",
  "d/M/",
  "dd",
  "dd.",
  "dd,",
  "dd-",
  "dd/",
  "dMM",
  "d.MM",
  "d,MM",
  "d-MM",
  "d/MM",
  "ddM",
  "dd.M",
  "dd,M",
  "dd-M",
  "dd/M",
  "ddMM",
  "dd.MM",
  "dd,MM",
  "dd-MM",
  "dd/MM",
];

const naFormats = [
  "M",
  "M.",
  "M,",
  "M-",
  "M/",
  "Md",
  "M.d.",
  "M,d,",
  "M-d-",
  "M/d/",
  "MM",
  "MM.",
  "MM,",
  "MM-",
  "MM/",
  "Mdd",
  "M.dd",
  "M,dd",
  "M-dd",
  "M/dd",
  "MMd",
  "MM.d",
  "MM,d",
  "MM-d",
  "MM/d",
  "MMdd",
  "MM.dd",
  "MM,dd",
  "MM-dd",
  "MM/dd",
  "Mdyy",
  "M.d.yy",
  "M,d,yy",
  "M-d-yy",
  "M/d/yy",
  "MMdyy",
  "MM.d.yy",
  "MM,d,yy",
  "MM-d-yy",
  "MM/d/yy",
  "Mddyy",
  "M.dd.yy",
  "M,dd,yy",
  "M-dd-yy",
  "M/dd/yy",
  "MMddyy",
  "MM.dd.yy",
  "MM,dd,yy",
  "MM-dd-yy",
  "MM/dd/yy",
  "Mdyyyy",
  "M.d.yyyy",
  "M,d,yyyy",
  "M-d-yyyy",
  "M/d/yyyy",
  "MMdyyyy",
  "MM.d.yyyy",
  "MM,d,yyyy",
  "MM-d-yyyy",
  "MM/d/yyyy",
  "Mddyyyy",
  "M.dd.yyyy",
  "M,dd,yyyy",
  "M-dd-yyyy",
  "M/dd/yyyy",
  "MMddyyyy",
  "MM.dd.yyyy",
  "MM,dd,yyyy",
  "MM-dd-yyyy",
  "MM/dd/yyyy",
];

describe.each([...euLocales, ...naLocales])(
  "localeMap for `%s` returns",
  (locale) => {
    it("the expected formats", () => {
      const expectedFormats = naLocales.includes(locale)
        ? naFormats
        : euFormats;
      const { formats } = localeMap[locale];

      expect(
        expectedFormats.every((format) => formats.includes(format)) &&
          formats.length === expectedFormats.length
      ).toEqual(true);
    });
  }
);
